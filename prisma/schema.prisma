// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  password       String?   // 如果使用 CredentialsProvider，需添加 password 欄位
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           Int        @default(0)  //層級
  pokemonId      String?    //寶可夢Id  

  deckUsers  DeckUser[]
  deckRatings    DeckRating[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text  // 如果需要，其他欄位也可調整
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Card {
  id                  Int      @id @default(autoincrement())
  number              String   @unique // 卡片編號
  set                 String   // 卡片系列 (A1, A2, etc., 可多個)
  dex                 String   // 卡包 (A1C, A1M, etc., 可多個)
  rarity              Int      // 稀有度
  name                String   // 名稱 (Moltres Ex)
  type                Int      // 類型
  stage               Int      // 階段
  hp                  Int      // 血量
  aspects             Int      // 屬性
  attack_1            Int      // 攻擊力_1
  attack_name_1       String   @default("") // 技能名稱_1 
  attack_aspects_1    String   // 攻擊能量_1 (多個值以逗號分隔)
  attack_skill_1      String?  // 技能規則_1 (多個值以逗號分隔)
  attack_skill_name_1 String?  // 技能規則說明_1
  attack_2            Int?     // 攻擊力_2 (可選)
  attack_name_2       String?   // 技能名稱_2 (可選)
  attack_aspects_2    String?  // 攻擊能量_2 (多個值以逗號分隔, 可選)
  attack_skill_2      String?  // 技能規則_2 (可選)
  attack_skill_name_2 String?  // 技能規則說明_2(可選)
  ability_name        String?  // 特性名稱說明
  ability_directions  String?  // 特性說明
  ability             String?  // 特性規則
  retreat             Int      // 撤退能量數
  retreat_aspects     String   // 撤退能量 (多個值以逗號分隔)
  weakness            Int      // 弱點
  weakness_value      Int      // 弱點傷害
  illustrator         String   // 畫家
  point               Int      // 兌換點數
  reprints            String?   // 相關卡牌 (多個卡片編號以逗號分隔)
  rule                String?  //規則

  @@map("Card") // 將模型映射到資料庫中的 "Card" 表
}

model Deck {
  id          String      @id @default(uuid())
  version     Int         @default(0)        //版本
  createdAt   DateTime    @default(now())    //建立日期
  updatedAt   DateTime    @updatedAt         //更動日期
  deckCards   String                         //牌組 存入格式A1-001,A1-231,PROMO-A-001...以此類推 
  
  deckUsers   DeckUser[]                    // 關聯到 DeckUser
  deckRatings DeckRating[] 
}

model DeckUser {
  id          Int         @id @default(autoincrement())
  deckId      String                         //Deck的id
  userId      String                         //對應User的id
  deckName    String                         //牌組名稱
  createdAt   DateTime    @default(now())    //建立日期
  updatedAt   DateTime    @updatedAt         //更動日期

  user        User        @relation(fields: [userId], references: [id])
  deck        Deck        @relation(fields: [deckId], references: [id])

  @@index([userId])
  @@index([deckId])
  @@unique([userId, deckId]) // 確保每個用戶對每個牌組只有一個收藏
}

model DeckRating {
  id        Int     @id @default(autoincrement())
  userId    String
  deckId    String
  rating    Float
  comment   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User   @relation(fields: [userId], references: [id])
  deck      Deck   @relation(fields: [deckId], references: [id])

  @@unique([userId, deckId]) // 每個用戶對每個牌組只有一個評分
}